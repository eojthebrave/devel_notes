<?php
// $Id$

/**
 * @file
 *
 * @todo - should be able to choose what filter to use with notes.
 */

// Define note status flags.
define('DEVEL_NOTES_STATUS_ACTIVE', 0);
define('DEVEL_NOTES_STATUS_FINISHED', 1);
define('DEVEL_NOTES_STATUS_NEEDS_INFO', 2);

/**
 * Implements of hook_init().
 *
 * We can't move this into devel_notes_footer(), because PHP-only based
 * themes like chameleon load and output scripts and stylesheets in front of
 * theme_closure(), so we ensure Devel Notes styles and scripts are loaded on
 * all pages via hook_init().
 */
function devel_notes_init() {
  if (user_access('access devel notes')) {
    $path = drupal_get_path('module', 'devel_notes');
    drupal_add_css($path .'/devel_notes.css', 'module', 'all', FALSE);
    drupal_add_js($path .'/devel_notes.js');

    // What page are we on
  	$cur_page = ($_GET['q']) ? $_GET['q'] : '<front>';
  	$notes = devel_notes_note_load_multiple(array('pg' => $cur_page));
  	if (count($notes)) {
    	$count = 0;
      foreach ($notes as $note_id => $note) {
        $notes[$note_id]->note_number = ++$count;
      }

      $selectors = array();
      foreach ($notes as $note) {
        if (!empty($note->selector)) {
          $selectors['note-' . $note->note_id] = array(
            'note_number' => $note->note_number,
            'selector' => check_plain($note->selector),
          );
        }
      }

      if (count($selectors)) {
        drupal_add_js(array('develNotes' => $selectors), 'setting'); 
      }
    }
  }
}

/**
 * Implements of hook_perm().
 */
function devel_notes_perm() {
  return array('access devel notes', 'administer devel notes');
}

/**
 * Implements hook_menu().
 */
function devel_notes_menu() {
  $items = array();
  $items['admin/devel_notes/note/%devel_notes_note'] = array(
    'title' => t('View'),
    'page callback' => 'devel_notes_note_view',
    'page arguments' => array(3),
    'access arguments' => array('administer devel notes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/devel_notes/note/%devel_notes_note/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/devel_notes/note/%devel_notes_note/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devel_notes_note_edit', 3),
    'access arguments' => array('administer devel notes'),
    'file' => 'devel_notes.admin.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/devel_notes/note/%devel_notes_note/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devel_notes_delete_confirm', 3),
    'access arguments' => array('administer devel notes'),
    'weight' => 1,
    'file' => 'devel_notes.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/devel_notes/note/status/js'] = array(
    'page callback' => 'devel_notes_note_status_js',
    'access arguments' => array('change status'),
    'file' => 'devel_notes.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function devel_notes_theme() {
  return array(
    'devel_notes' => array(
      'arguments' => array('path' => NULL, 'notes' => NULL),
      ),
    'devel_notes_notes' => array(
      'arguments' => array('notes' => NULL),
      ),
    'devel_notes_note' => array(
      'arguments' => array('note' => NULL),
      ),
    'devel_notes_note_details' => array(
      'arguments' => array('note' => NULL),
      ),
  );
}

/**
 * Implements hook_footer().
 */
function devel_notes_footer($main = 0) {
	if (!user_access('administer devel notes') && !user_access('access devel notes')) {
		return;
	}
	return devel_notes_main();
}

/**
 * undocumented function
 *
 * @return void
 */
function devel_notes_noteapi($op, &$note) {
  switch ($op) {
    case 'load':
      // Add a short version of the note for use in titles etc.
      $note->short = truncate_utf8($note->note, 40, FALSE, TRUE);
      break;

    case 'insert':
      /** TODO:
       * 1. Intercept any error messages handled by Drupal so we can insert them along with this note
       *
       * 2. Dump extra info about the current page, $_SESSION, $user, and any other variables that might be useful.
       * maybe a stack trace or something?
       */
      
      // we probably don't want to log any passwords. Just comment this out if you do want passwords
      // in the $_SERVER variable logged
      $_SERVER['PHP_AUTH_PW'] = ($_SERVER['PHP_AUTH_PW']) ? '*****' : '';
      
      $note->info['server'] = array('title' => '$_SERVER', 'data' => $_SERVER);
      
      $note->info['session'] = array('title' => '$_SESESSION', 'data' => $_SESSION);
      break;
  }
}

/**
 * Load a $note object from the database and invoke the noteapi hook for all
 * modules.
 *
 * Notes are statically cached after loading.
 *
 * @param $node_id
 *   Unique ID of the note to load.
 * @param $reset
 *   Boolean indicating whether the static cache should be reset.
 * @return
 *   Returns the loaded $note object.
 *
 * @see devel_notes_note_load_multiple().
 */
function devel_notes_note_load($note_id, $reset = FALSE) {
  $notes = devel_notes_note_load_multiple($note_id, $reset);
  return $notes;
}

/**
 * Load multiple notes from the database.
 *
 * Loads one or more notes from the database depending on paramaters, loaded
 * notes are staticlly cached however the cached note is only used when
 * loading a single note by note_id.
 *
 * @param $param
 *   Either the unique note_id of a note to load or an associative array of
 *   paramaters to search on. If using the array format the key is the name
 *   of a field in the {devel_notes} table and the value is the value to search
 *   for. All params are anded together.
 * @param $reset
 *   Boolean indicating whether the static cache should be reset.
 *
 * @return
 *   Either a single note object or an array of note objects keyed by note_id.
 */
function devel_notes_note_load_multiple($param, $reset = FALSE) {
  static $devel_notes = array();

  if ($reset) {
    $devel_notes = array();
  }

  $static_id = is_numeric($param) ? FALSE : md5(serialize($param));

  $arguments = array();
  if (is_numeric($param)) {
    if (isset($devel_notes[$param])) {
      return is_object($devel_notes[$param]) ? drupal_clone($devel_notes[$param]) : $devel_notes[$param];
    }
    $conditions = 'dn.note_id=%d';
    $arguments[] = $param;
  }
  elseif (is_array($param)) {
    if (isset($devel_notes[$static_id])) {
      $notes = $devel_notes[$static_id];
      return $notes;
    }
    // Turn the param array into a query.
    $conditions = array();
    foreach ($param as $key => $value) {
      $conditions[] = 'dn.' . db_escape_table($key) . ' = "%s"';
      $arguments = $value;
    }
    $conditions = implode(' AND ', $conditions);
  }
  else {
    return FALSE;
  }

  $results = db_query('SELECT dn.*, u.name FROM {devel_notes} dn INNER JOIN {users} u ON u.uid=dn.uid WHERE ' . $conditions, $arguments);
  $notes = array();
  while ($note = db_fetch_object($results)) {
    module_invoke_all('noteapi', 'load', $note);
    $notes[$note->note_id] = $note;
  }

  $devel_notes = $notes;
  if ($static_id) {
    $devel_notes[$static_id] = $notes;
  }

  return (is_numeric($param)) ? $notes[$param] : $notes;
}

/**
 * Delete a note from the database.
 *
 * @param $node_id
 *   Unique ID of the note to delete.
 */
function devel_notes_note_delete($note_id) {
  $note = devel_notes_note_load($note_id);
  // Allow other modules to respond to note being deleted.
  module_invoke_all('noteapi', 'delete', $note);
  db_query('DELETE FROM {devel_notes} WHERE note_id = %d', $note->note_id);
}

/**
 * undocumented function
 *
 * @return void
 */
function devel_notes_note_view($note) {
  module_invoke_all('noteapi', 'view', $note);
  return theme('devel_notes_note_details', $note);
}

/**
 * undocumented function
 */
function devel_notes_main($return = TRUE) {
	// What page are we on
	$cur_page = ($_GET['q']) ? $_GET['q'] : '<front>';

	// Show any notes for this page
	$notes = devel_notes_note_load_multiple(array('pg' => $cur_page));
	$count = 0;
  foreach ($notes as $note_id => $note) {
    $notes[$note_id]->note_number = ++$count;
  }

	/*
	$res = db_query('SELECT note_id FROM {devel_notes} WHERE pg="%s" ORDER BY status, created', $cur_page);
	$notes = array();
	$count = 1;
	while($n = db_fetch_object($res)) {
		$notes[$n->note_id] = devel_notes_note_load($n->note_id);
		$notes[$n->note_id]->note_number = $count;
		$count++;
	}
	*/

  $selectors = array();
  foreach ($notes as $note) {
    if (!empty($note->selector)) {
      $selectors["$note->note_number"] = $note->selector;
    }
  }

  if (count($selectors)) {
    drupal_add_js(array('devel_notes' => array('testing' => 'blam')), 'setting'); 
  }

	return theme('devel_notes', $cur_page, $notes);
}

/**
 *
 */
function devel_notes_new_note() {
	$cur_page = ($_GET['q']) ? $_GET['q'] : '<front>';

	$form = array();
	$form['help'] = array(
	  '#type' => 'markup',
	  '#value' => t('You can optionally choose an element on this page to leave a note about by clicking that element.'),
	);
	$form['pg'] = array(
	  '#type' => 'hidden',
	  '#value' => $cur_page,
	  '#disabled' => TRUE,
	);
	$form['note'] = array(
		'#type' => 'textarea',
		'#title' => t('Add a note'),
		'#rows' => 8,
		'#required' => TRUE,
	);
  $form['selector'] = array(
    '#type' => 'hidden',
    '#title' => t('Selector'),
  );
	$form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
	return $form;
}

/**
 * Validation callback for devel_notes_new_note form.
 */
function devel_notes_new_note_validate($form, &$form_state) {
  
}

/**
 * Submit callback for devel_notes_new_note form.
 */
function devel_notes_new_note_submit($form, &$form_state) {
  global $user;

  // Setup a new $note object.
  $note = array(
    'uid' => $user->uid,
    'pg' => $form_state['values']['pg'],
    'status' => DEVEL_NOTES_STATUS_ACTIVE,
    'note' => $form_state['values']['note'],
    'info' => array(),
    'selector' => $form_state['values']['selector'],
    'created' => time(),
    );
  $note = (object)$note;

  // Give other modules a chance to do something with the $note object before
  // we insert it into the database.
  module_invoke_all('noteapi', 'insert', $note);

  // $note->info should always be an array, so we serialize it before saving.
  $note->info = serialize($note->info);

  drupal_write_record('devel_notes', $note);

  // Back to the page we came from.
  drupal_set_message(t('Your note has been added'));
  drupal_goto($form['pg']['#value']);
}

/**
 * Form builder for changing a notes status.
 */
function devel_notes_note_status($form_state, $note = NULL) {
  $form = array();
  $form['note_status'] = array(
    '#prefix' => '<div id="status-wrapper-'. $note->note_id .'">',
    '#suffix' => '</div>',
    );
  $form['note_status']['status'] = array(
    '#type' =>  'select',
    '#title' => t('Status'),
    '#default_value' => ($note) ? $note->status : DEVEL_NOTES_STATUS_ACTIVE,
    '#options' => _devel_notes_get_status_ops(),
    );
  $form['note_status']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#name' => 'update',
    '#ahah' => array(
      'path' => 'admin/devel_notes/note/status/js',
      'wrapper' => 'status-wrapper-'. $note->note_nid,
      'progress' => array('type' => 'throbber', 'message' => t('Please wait ...')),
      ),
    '#submit' => array('devel_notes_note_status_submit'),
    );
  return $form;
}

/**
 * Callback for admin/devel_notes/note/status/js
 */
function devel_notes_note_status_js() {
  exit('here');
}

/**
 * Build an array of status options for a note that is suitible for use in
 * a select form element.
 */
function _devel_notes_get_status_ops() {
  return array(
    DEVEL_NOTES_STATUS_ACTIVE => t('Active'),
    DEVEL_NOTES_STATUS_NEEDS_INFO => t('Needs more info'),
    DEVEL_NOTES_STATUS_FINISHED => t('Finished'),
  );
}

/**
 * Themeable functions
 */

function theme_devel_notes($path, $notes) {
  $output = '<div id="devel-notes">';

  // Count number of un-finished notes.
  $count = 0;
  $incomplete = array();
  $complete = array();
  foreach ($notes as $note) {
    if ($note->status != DEVEL_NOTES_STATUS_FINISHED) {
      $incomplete[] = $note;
      $count++;
    }
    else {
      $complete[] = $note;
    }
  }

  if ($count) {
    $output .= '<div id="devel-notes-badge">'. $count .'</div>';
  }
  $output .= l(t('Notes'), $path, array('attributes' => array('id' => 'devel-notes-tab'), 'fragment' => 'devel_notes'));
	$output .= '<div id="devel-notes-inner" style="display:none;">';

	$output .= '<div id="devel-notes-notes">';
	if (count($incomplete) || count($complete)) {
    if (count($incomplete)) {
      $output .= theme('devel_notes_notes', $incomplete);
    }

    if (count($complete)) {
      $output .= '<p>' . t('<strong>Complete:</strong> The following notes have been marked as completed.') . '</h2>';
      $output .= theme('devel_notes_notes', $complete);
    }
	}
	else {
		$output .= '<p>'. t('There are currently no notes for this page (%page).', array('%page' => $path)) .'</p>';
	}
	$output .= '</div>';

	$output .= drupal_get_form('devel_notes_new_note');
	$output .= '</div></div>';
	return $output;
}
 
/**
 * theme_devel_notes_notes
 *
 * @param array $notes
 *  An array of note objects.
 */
function theme_devel_notes_notes($notes) {
  $output = '';
  foreach ($notes as $note) {
    $output .= theme('devel_notes_note', $note);
  }
  return $output;
}

/**
 * theme_devel_notes_note
 *
 * @param object $note
 *
 * @return xhtml formatted notes
 **/
function theme_devel_notes_note($note) {
	$output .= '<div class="devel-notes-note" id="note-' . $note->note_id . '">';
	$output .= '<div class="devel-notes-note-meta">';
	$output .= '<div class="devel-notes-note-number">' . t('#@number', array('@number' => $note->note_number)) . '</div>';
	$output .= l($note->name, 'user/'. $note->uid) . '<br/>' . format_date($note->created, 'custom', 'm/d/Y');
	if (user_access('administer devel notes')) {
	  $output .= '<br/>' . l(t('details'), 'admin/devel_notes/note/'. $note->note_id);
	}
	$output .= '</div>';
	$output .= '<div class="devel-notes-note-content">' . check_markup($note->note, FILTER_FORMAT_DEFAULT) . '</div>';
	$output .= '</div>';
	return $output;
}

/**
 * theme_devel_notes_note_details
 *
 * @param object $note
 * @return string $output
 *  xHTML rendering of the note and it's details.
 */
function theme_devel_notes_note_details($note){
  drupal_set_title('Devel Note #'. $note->note_id .' - '. check_plain($note->pg));
  $output .= '<p>'. t('Note for: !page', array('!page' => l($note->pg, $note->pg))) .'</p>';
  $output .= theme('devel_notes_note', $note);

  $infos = unserialize($note->info);
  if ($infos) {
    $output .= '<p>'. t('The following information was logged when this note was created') .'</p>';
    foreach ($infos as $info) {
      if (!empty($info['data'])) {
        $output .= '<h3>'. $info['title'] .'</h3>';
        if (module_exists('devel')) {
          $output .= kprint_r($info['data'], TRUE);
        }
        else {
          $rows = array();
          foreach ($info['data'] as $key => $value) {
            $rows[] = array($key, $value);
          }
          $output .= theme('table', array('key', 'value'), $rows);
        }
      }
    }
  }

  return $output;
}

/**
 * Implementation of hook_views_api().
 */
function devel_notes_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'devel_notes') . '/views',
  );
}
